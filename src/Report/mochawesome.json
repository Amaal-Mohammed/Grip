{
  "stats": {
    "suites": 1,
    "tests": 9,
    "passes": 8,
    "pending": 0,
    "failures": 1,
    "start": "2020-11-25T02:54:47.567Z",
    "end": "2020-11-25T02:55:33.512Z",
    "duration": 45945,
    "testsRegistered": 9,
    "passPercent": 88.88888888888889,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "298975ee-6b28-426e-9c19-90c62e9f3150",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "16630404-d576-4c88-b921-6591c7710ee9",
          "title": "Login TestSuite",
          "fullFile": "D:\\Grip\\src\\tests\\logintest.ts",
          "file": "\\src\\tests\\logintest.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: Before in \"Login TestSuite\"",
              "fullTitle": "Login TestSuite \"before all\" hook: Before in \"Login TestSuite\"",
              "timedOut": false,
              "duration": 35,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(void 0, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n            driver = browsersetup_1.default.getDriver();\n            return [2 /*return*/];\n        });\n    });",
              "err": {},
              "uuid": "d9eca66d-6bba-485a-a7ee-ca7f2c6e89fe",
              "parentUUID": "16630404-d576-4c88-b921-6591c7710ee9",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook: After in \"Login TestSuite\"",
              "fullTitle": "Login TestSuite \"after all\" hook: After in \"Login TestSuite\"",
              "timedOut": false,
              "duration": 5122,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(void 0, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0: return [4 /*yield*/, helpers_1.default.delay(5000)];\n                case 1:\n                    _a.sent();\n                    return [4 /*yield*/, driver.quit()];\n                case 2:\n                    _a.sent();\n                    return [2 /*return*/];\n            }\n        });\n    });",
              "err": {},
              "uuid": "543ae6dd-c66f-45c8-b472-3fb5f95b5c42",
              "parentUUID": "16630404-d576-4c88-b921-6591c7710ee9",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook in \"Login TestSuite\"",
              "fullTitle": "Login TestSuite \"after each\" hook in \"Login TestSuite\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "helpers_1.default.delay(5000);\nhelpers_1.default.takeScreenshotForFailedTests(driver, this.currentTest.title, this.currentTest.state);",
              "err": {},
              "uuid": "f4e11741-e404-4fc6-abbd-45c5d79c1d05",
              "parentUUID": "16630404-d576-4c88-b921-6591c7710ee9",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Verify Next button is not enabled when user leave email empty",
              "fullTitle": "Login TestSuite Verify Next button is not enabled when user leave email empty",
              "timedOut": false,
              "duration": 11731,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(void 0, void 0, void 0, function () {\n        var actualresult;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0: return [4 /*yield*/, driver.get(constants_json_1.default.url)];\n                case 1:\n                    _a.sent();\n                    return [4 /*yield*/, helpers_1.default.delay(5000)];\n                case 2:\n                    _a.sent();\n                    return [4 /*yield*/, loginpage_1.default.getNextBtnIsEnabled(driver)];\n                case 3:\n                    actualresult = _a.sent();\n                    assert.equal(login_json_1.default.ButtonIsNotactive, actualresult);\n                    return [2 /*return*/];\n            }\n        });\n    });",
              "err": {},
              "uuid": "b27de7f9-37c5-4155-83ff-3b4cc3f53c11",
              "parentUUID": "16630404-d576-4c88-b921-6591c7710ee9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify Next button is not enabled when error message is displayed when user inserts invalid email",
              "fullTitle": "Login TestSuite Verify Next button is not enabled when error message is displayed when user inserts invalid email",
              "timedOut": false,
              "duration": 1066,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(void 0, void 0, void 0, function () {\n        var actualresult, meg;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0: return [4 /*yield*/, loginpage_1.default.setEmail(driver, login_json_1.default.invalidemail + selenium_webdriver_1.Key.TAB)];\n                case 1:\n                    _a.sent();\n                    return [4 /*yield*/, helpers_1.default.delay(1000)];\n                case 2:\n                    _a.sent();\n                    return [4 /*yield*/, loginpage_1.default.getNextBtnIsEnabled(driver)];\n                case 3:\n                    actualresult = _a.sent();\n                    return [4 /*yield*/, loginpage_1.default.getEmailErrorInvalidEmailMsgstate(driver)];\n                case 4:\n                    meg = _a.sent();\n                    assert.equal(login_json_1.default.ButtonIsNotactive, actualresult);\n                    assert.equal(login_json_1.default.errormegisdisplayed, meg);\n                    return [2 /*return*/];\n            }\n        });\n    });",
              "err": {},
              "uuid": "c53711ed-bf3b-46a7-8ca3-c24a2805d5db",
              "parentUUID": "16630404-d576-4c88-b921-6591c7710ee9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify Next button is enabled when user inserts valid email",
              "fullTitle": "Login TestSuite Verify Next button is enabled when user inserts valid email",
              "timedOut": false,
              "duration": 5307,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(void 0, void 0, void 0, function () {\n        var actualresult;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0: return [4 /*yield*/, helpers_1.default.delay(5000)];\n                case 1:\n                    _a.sent();\n                    return [4 /*yield*/, loginpage_1.default.clearEmailField(driver)];\n                case 2:\n                    _a.sent();\n                    return [4 /*yield*/, loginpage_1.default.setEmail(driver, login_json_1.default.validemail)];\n                case 3:\n                    _a.sent();\n                    return [4 /*yield*/, loginpage_1.default.getNextBtnIsEnabled(driver)];\n                case 4:\n                    actualresult = _a.sent();\n                    assert.equal(login_json_1.default.ButtonIsactive, actualresult);\n                    return [4 /*yield*/, loginpage_1.default.clearEmailField(driver)];\n                case 5:\n                    _a.sent();\n                    return [2 /*return*/];\n            }\n        });\n    });",
              "err": {},
              "uuid": "9390c708-e131-4316-927f-7c66b5f32e8d",
              "parentUUID": "16630404-d576-4c88-b921-6591c7710ee9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify login  button is not enabled when password field is empty",
              "fullTitle": "Login TestSuite Verify login  button is not enabled when password field is empty",
              "timedOut": false,
              "duration": 2025,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(void 0, void 0, void 0, function () {\n        var actualresult;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0: return [4 /*yield*/, loginpage_1.default.setEmail(driver, login_json_1.default.validemail)];\n                case 1:\n                    _a.sent();\n                    return [4 /*yield*/, loginpage_1.default.clickNextBtn(driver)];\n                case 2:\n                    _a.sent();\n                    return [4 /*yield*/, helpers_1.default.delay(2000)];\n                case 3:\n                    _a.sent();\n                    return [4 /*yield*/, loginpage_1.default.getLogInBtnIsEnabled(driver)];\n                case 4:\n                    actualresult = _a.sent();\n                    assert.equal(login_json_1.default.ButtonIsNotactive, actualresult);\n                    return [2 /*return*/];\n            }\n        });\n    });",
              "err": {},
              "uuid": "20f3d9af-b6f0-4878-ab3c-a30068034300",
              "parentUUID": "16630404-d576-4c88-b921-6591c7710ee9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify insert valid email and pssword for user not registered",
              "fullTitle": "Login TestSuite Verify insert valid email and pssword for user not registered",
              "timedOut": false,
              "duration": 5030,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(void 0, void 0, void 0, function () {\n        var msg;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0: return [4 /*yield*/, helpers_1.default.delay(1000)];\n                case 1:\n                    _a.sent();\n                    return [4 /*yield*/, loginpage_1.default.setPassword(driver, login_json_1.default.validpassword)];\n                case 2:\n                    _a.sent();\n                    return [4 /*yield*/, loginpage_1.default.clickLoginBtn(driver)];\n                case 3:\n                    _a.sent();\n                    return [4 /*yield*/, helpers_1.default.delay(2000)];\n                case 4:\n                    _a.sent();\n                    return [4 /*yield*/, loginpage_1.default.getErrorInvalidEmailOrPasswordState(driver)];\n                case 5:\n                    msg = _a.sent();\n                    return [4 /*yield*/, helpers_1.default.delay(2000)];\n                case 6:\n                    _a.sent();\n                    assert.equal(login_json_1.default.errormegisdisplayed, msg);\n                    return [2 /*return*/];\n            }\n        });\n    });",
              "err": {},
              "uuid": "41587ca4-f20a-43b3-8d7f-3b4b8b71c273",
              "parentUUID": "16630404-d576-4c88-b921-6591c7710ee9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": " Verify click foregetpassword and Check send the link button ",
              "fullTitle": "Login TestSuite  Verify click foregetpassword and Check send the link button ",
              "timedOut": false,
              "duration": 5037,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(void 0, void 0, void 0, function () {\n        var sendbtn;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0: return [4 /*yield*/, loginpage_1.default.clickForgotPasswordLink(driver)];\n                case 1:\n                    _a.sent();\n                    return [4 /*yield*/, helpers_1.default.delay(5000)];\n                case 2:\n                    _a.sent();\n                    return [4 /*yield*/, passwordrecoverypage_1.default.getSendLinkstate(driver)];\n                case 3:\n                    sendbtn = _a.sent();\n                    assert.equal(login_json_1.default.ButtonIsdisplayed, sendbtn);\n                    return [2 /*return*/];\n            }\n        });\n    });",
              "err": {},
              "uuid": "ce497875-41a9-477b-8186-ad015b37fa32",
              "parentUUID": "16630404-d576-4c88-b921-6591c7710ee9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": " Verify click foregetpassword and Click send button and password recovery message is displayed  ",
              "fullTitle": "Login TestSuite  Verify click foregetpassword and Click send button and password recovery message is displayed  ",
              "timedOut": false,
              "duration": 482,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(void 0, void 0, void 0, function () {\n        var stn2;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0: return [4 /*yield*/, passwordrecoverypage_1.default.clickONSendLink(driver)];\n                case 1:\n                    _a.sent();\n                    return [4 /*yield*/, passwordrecoverypage_1.default.getPasswordRecoveryMsgState(driver)];\n                case 2:\n                    stn2 = _a.sent();\n                    assert.equal(login_json_1.default.foregetpasswordMeg, stn2);\n                    return [2 /*return*/];\n            }\n        });\n    });",
              "err": {},
              "uuid": "4865abe0-e798-4b54-93e6-5b62c2bf8376",
              "parentUUID": "16630404-d576-4c88-b921-6591c7710ee9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify when user click on back to login will be redirected back to the login page ",
              "fullTitle": "Login TestSuite Verify when user click on back to login will be redirected back to the login page ",
              "timedOut": false,
              "duration": 5009,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(void 0, void 0, void 0, function () {\n        var error_1, currenturl;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    _a.trys.push([0, 2, 3, 6]);\n                    return [4 /*yield*/, passwordrecoverypage_1.default.clickBackToLogin(driver)];\n                case 1:\n                    _a.sent();\n                    return [3 /*break*/, 6];\n                case 2:\n                    error_1 = _a.sent();\n                    console.log(error_1);\n                    return [3 /*break*/, 6];\n                case 3: return [4 /*yield*/, helpers_1.default.delay(5000)];\n                case 4:\n                    _a.sent();\n                    return [4 /*yield*/, driver.getCurrentUrl()];\n                case 5:\n                    currenturl = _a.sent();\n                    assert.equal(login_json_1.default.loginurl, currenturl, \"The login page is not opened\");\n                    return [7 /*endfinally*/];\n                case 6: return [2 /*return*/];\n            }\n        });\n    });",
              "err": {},
              "uuid": "86709feb-2e7e-4a9b-b70c-879038d6570e",
              "parentUUID": "16630404-d576-4c88-b921-6591c7710ee9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify User can Sign Up to create an account",
              "fullTitle": "Login TestSuite Verify User can Sign Up to create an account",
              "timedOut": false,
              "duration": 5028,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "return __awaiter(void 0, void 0, void 0, function () {\n        var currenturl;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    loginpage_1.default.scrollToSignUpPage(driver);\n                    return [4 /*yield*/, helpers_1.default.delay(5000)];\n                case 1:\n                    _a.sent();\n                    return [4 /*yield*/, driver.getCurrentUrl()];\n                case 2:\n                    currenturl = _a.sent();\n                    assert.equal(login_json_1.default.expectedsignupurl, currenturl, \"The Sign up page is not opened\");\n                    return [2 /*return*/];\n            }\n        });\n    });",
              "err": {
                "message": "AssertionError: The Sign up page is not opened",
                "estack": "AssertionError [ERR_ASSERTION]: The Sign up page is not opened\n    at D:\\Grip\\src\\tests\\logintest.ts:123:10\n    at step (src\\tests\\logintest.ts:52:23)\n    at Object.next (src\\tests\\logintest.ts:33:53)\n    at fulfilled (src\\tests\\logintest.ts:24:58)\n    at processTicksAndRejections (internal/process/task_queues.js:93:5)",
                "diff": "- https://www.grip.tools/index.html#footer-form\n+ https://www.grip.tools/request-a-demo/\n"
              },
              "uuid": "4b4ea5b3-e9e9-4435-b914-39282233019a",
              "parentUUID": "16630404-d576-4c88-b921-6591c7710ee9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b27de7f9-37c5-4155-83ff-3b4cc3f53c11",
            "c53711ed-bf3b-46a7-8ca3-c24a2805d5db",
            "9390c708-e131-4316-927f-7c66b5f32e8d",
            "20f3d9af-b6f0-4878-ab3c-a30068034300",
            "41587ca4-f20a-43b3-8d7f-3b4b8b71c273",
            "ce497875-41a9-477b-8186-ad015b37fa32",
            "4865abe0-e798-4b54-93e6-5b62c2bf8376",
            "86709feb-2e7e-4a9b-b70c-879038d6570e"
          ],
          "failures": [
            "4b4ea5b3-e9e9-4435-b914-39282233019a"
          ],
          "pending": [],
          "skipped": [],
          "duration": 40715,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1500000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 1500000
    }
  ],
  "meta": {
    "mocha": {
      "version": "8.2.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.1"
    },
    "marge": {
      "options": {
        "reportDir": "src/Report",
        "": true
      },
      "version": "5.1.0"
    }
  }
}